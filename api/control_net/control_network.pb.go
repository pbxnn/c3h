// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.1
// source: control_net/control_network.proto

package control_network

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SetR401APCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MAPDControlMode    int32 `protobuf:"varint,1,opt,name=MAPD_control_mode,json=MAPDControlMode,proto3" json:"MAPD_control_mode,omitempty"`
	APCSwitch          int32 `protobuf:"varint,2,opt,name=APC_switch,json=APCSwitch,proto3" json:"APC_switch,omitempty"`
	APCWrite           int32 `protobuf:"varint,3,opt,name=APC_write,json=APCWrite,proto3" json:"APC_write,omitempty"`
	CommunicationLight int32 `protobuf:"varint,4,opt,name=communication_light,json=communicationLight,proto3" json:"communication_light,omitempty"`
}

func (x *SetR401APCRequest) Reset() {
	*x = SetR401APCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_net_control_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetR401APCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetR401APCRequest) ProtoMessage() {}

func (x *SetR401APCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_net_control_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetR401APCRequest.ProtoReflect.Descriptor instead.
func (*SetR401APCRequest) Descriptor() ([]byte, []int) {
	return file_control_net_control_network_proto_rawDescGZIP(), []int{0}
}

func (x *SetR401APCRequest) GetMAPDControlMode() int32 {
	if x != nil {
		return x.MAPDControlMode
	}
	return 0
}

func (x *SetR401APCRequest) GetAPCSwitch() int32 {
	if x != nil {
		return x.APCSwitch
	}
	return 0
}

func (x *SetR401APCRequest) GetAPCWrite() int32 {
	if x != nil {
		return x.APCWrite
	}
	return 0
}

func (x *SetR401APCRequest) GetCommunicationLight() int32 {
	if x != nil {
		return x.CommunicationLight
	}
	return 0
}

type SetR401APCReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetR401APCReply) Reset() {
	*x = SetR401APCReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_net_control_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetR401APCReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetR401APCReply) ProtoMessage() {}

func (x *SetR401APCReply) ProtoReflect() protoreflect.Message {
	mi := &file_control_net_control_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetR401APCReply.ProtoReflect.Descriptor instead.
func (*SetR401APCReply) Descriptor() ([]byte, []int) {
	return file_control_net_control_network_proto_rawDescGZIP(), []int{1}
}

type SetOperationVarsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RcyMaterialFlow     string `protobuf:"bytes,1,opt,name=rcy_material_flow,json=rcyMaterialFlow,proto3" json:"rcy_material_flow,omitempty"`
	CHRation            string `protobuf:"bytes,2,opt,name=c_h_ration,json=cHRation,proto3" json:"c_h_ration,omitempty"`
	EntranceTemperature string `protobuf:"bytes,3,opt,name=entrance_temperature,json=entranceTemperature,proto3" json:"entrance_temperature,omitempty"`
	HFlow               string `protobuf:"bytes,4,opt,name=h_flow,json=hFlow,proto3" json:"h_flow,omitempty"`
}

func (x *SetOperationVarsRequest) Reset() {
	*x = SetOperationVarsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_net_control_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOperationVarsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperationVarsRequest) ProtoMessage() {}

func (x *SetOperationVarsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_net_control_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperationVarsRequest.ProtoReflect.Descriptor instead.
func (*SetOperationVarsRequest) Descriptor() ([]byte, []int) {
	return file_control_net_control_network_proto_rawDescGZIP(), []int{2}
}

func (x *SetOperationVarsRequest) GetRcyMaterialFlow() string {
	if x != nil {
		return x.RcyMaterialFlow
	}
	return ""
}

func (x *SetOperationVarsRequest) GetCHRation() string {
	if x != nil {
		return x.CHRation
	}
	return ""
}

func (x *SetOperationVarsRequest) GetEntranceTemperature() string {
	if x != nil {
		return x.EntranceTemperature
	}
	return ""
}

func (x *SetOperationVarsRequest) GetHFlow() string {
	if x != nil {
		return x.HFlow
	}
	return ""
}

type SetOperationVarsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetOperationVarsReply) Reset() {
	*x = SetOperationVarsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_net_control_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetOperationVarsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetOperationVarsReply) ProtoMessage() {}

func (x *SetOperationVarsReply) ProtoReflect() protoreflect.Message {
	mi := &file_control_net_control_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetOperationVarsReply.ProtoReflect.Descriptor instead.
func (*SetOperationVarsReply) Descriptor() ([]byte, []int) {
	return file_control_net_control_network_proto_rawDescGZIP(), []int{3}
}

type ConfirmReactorPerfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmReactorPerfRequest) Reset() {
	*x = ConfirmReactorPerfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_net_control_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmReactorPerfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmReactorPerfRequest) ProtoMessage() {}

func (x *ConfirmReactorPerfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_net_control_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmReactorPerfRequest.ProtoReflect.Descriptor instead.
func (*ConfirmReactorPerfRequest) Descriptor() ([]byte, []int) {
	return file_control_net_control_network_proto_rawDescGZIP(), []int{4}
}

type ConfirmReactorPerfReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfirmReactorPerfReply) Reset() {
	*x = ConfirmReactorPerfReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_net_control_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfirmReactorPerfReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfirmReactorPerfReply) ProtoMessage() {}

func (x *ConfirmReactorPerfReply) ProtoReflect() protoreflect.Message {
	mi := &file_control_net_control_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfirmReactorPerfReply.ProtoReflect.Descriptor instead.
func (*ConfirmReactorPerfReply) Descriptor() ([]byte, []int) {
	return file_control_net_control_network_proto_rawDescGZIP(), []int{5}
}

type GetReactorPerfRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetReactorPerfRequest) Reset() {
	*x = GetReactorPerfRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_net_control_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReactorPerfRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReactorPerfRequest) ProtoMessage() {}

func (x *GetReactorPerfRequest) ProtoReflect() protoreflect.Message {
	mi := &file_control_net_control_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReactorPerfRequest.ProtoReflect.Descriptor instead.
func (*GetReactorPerfRequest) Descriptor() ([]byte, []int) {
	return file_control_net_control_network_proto_rawDescGZIP(), []int{6}
}

type GetReactorPerfReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MAPD string `protobuf:"bytes,1,opt,name=MAPD,proto3" json:"MAPD,omitempty"`
	C3H6 string `protobuf:"bytes,2,opt,name=c3h6,proto3" json:"c3h6,omitempty"`
	C3H8 string `protobuf:"bytes,3,opt,name=c3h8,proto3" json:"c3h8,omitempty"`
}

func (x *GetReactorPerfReply) Reset() {
	*x = GetReactorPerfReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_control_net_control_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetReactorPerfReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetReactorPerfReply) ProtoMessage() {}

func (x *GetReactorPerfReply) ProtoReflect() protoreflect.Message {
	mi := &file_control_net_control_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetReactorPerfReply.ProtoReflect.Descriptor instead.
func (*GetReactorPerfReply) Descriptor() ([]byte, []int) {
	return file_control_net_control_network_proto_rawDescGZIP(), []int{7}
}

func (x *GetReactorPerfReply) GetMAPD() string {
	if x != nil {
		return x.MAPD
	}
	return ""
}

func (x *GetReactorPerfReply) GetC3H6() string {
	if x != nil {
		return x.C3H6
	}
	return ""
}

func (x *GetReactorPerfReply) GetC3H8() string {
	if x != nil {
		return x.C3H8
	}
	return ""
}

var File_control_net_control_network_proto protoreflect.FileDescriptor

var file_control_net_control_network_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xac, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x52, 0x34,
	0x30, 0x31, 0x41, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11,
	0x4d, 0x41, 0x50, 0x44, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4d, 0x41, 0x50, 0x44, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x41, 0x50, 0x43, 0x5f,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x50,
	0x43, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x41, 0x50, 0x43, 0x5f, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x41, 0x50, 0x43, 0x57,
	0x72, 0x69, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x52, 0x34, 0x30, 0x31,
	0x41, 0x50, 0x43, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0xad, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x72, 0x63, 0x79, 0x5f, 0x6d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x72, 0x63, 0x79, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x77,
	0x12, 0x1c, 0x0a, 0x0a, 0x63, 0x5f, 0x68, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x48, 0x52, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31,
	0x0a, 0x14, 0x65, 0x6e, 0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x65, 0x6e,
	0x74, 0x72, 0x61, 0x6e, 0x63, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x15, 0x0a, 0x06, 0x68, 0x5f, 0x66, 0x6c, 0x6f, 0x77, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x68, 0x46, 0x6c, 0x6f, 0x77, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x1b, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x19,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x17, 0x0a, 0x15, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x51, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x41, 0x50,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4d, 0x41, 0x50, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x33, 0x68, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x33, 0x68,
	0x36, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x33, 0x68, 0x38, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x63, 0x33, 0x68, 0x38, 0x32, 0xd9, 0x04, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x4e, 0x65, 0x74, 0x12, 0x80, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x52, 0x34, 0x30, 0x31,
	0x41, 0x50, 0x43, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x34, 0x30,
	0x31, 0x41, 0x50, 0x43, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x2e, 0x53, 0x65, 0x74, 0x52, 0x34, 0x30, 0x31, 0x41, 0x50, 0x43, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x63,
	0x33, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d, 0x6e, 0x65, 0x74, 0x2f, 0x72,
	0x34, 0x30, 0x31, 0x2d, 0x61, 0x70, 0x63, 0x12, 0x98, 0x01, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72, 0x73, 0x12, 0x2c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56,
	0x61, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x2e, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x72,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01,
	0x2a, 0x22, 0x1f, 0x2f, 0x63, 0x33, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x2d,
	0x6e, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x76, 0x61,
	0x72, 0x73, 0x12, 0x9c, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x12, 0x2e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65,
	0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65,
	0x72, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x3a,
	0x01, 0x2a, 0x22, 0x1d, 0x2f, 0x63, 0x33, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2d, 0x6e, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x65, 0x72,
	0x66, 0x12, 0x8d, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x65, 0x72, 0x66, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x65, 0x72, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x63, 0x33, 0x68, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x2d, 0x6e, 0x65, 0x74, 0x2f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x2d, 0x70, 0x65, 0x72,
	0x66, 0x42, 0x40, 0x0a, 0x13, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x50, 0x01, 0x5a, 0x27, 0x63, 0x33, 0x68, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x3b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_control_net_control_network_proto_rawDescOnce sync.Once
	file_control_net_control_network_proto_rawDescData = file_control_net_control_network_proto_rawDesc
)

func file_control_net_control_network_proto_rawDescGZIP() []byte {
	file_control_net_control_network_proto_rawDescOnce.Do(func() {
		file_control_net_control_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_control_net_control_network_proto_rawDescData)
	})
	return file_control_net_control_network_proto_rawDescData
}

var file_control_net_control_network_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_control_net_control_network_proto_goTypes = []interface{}{
	(*SetR401APCRequest)(nil),         // 0: api.control_network.SetR401APCRequest
	(*SetR401APCReply)(nil),           // 1: api.control_network.SetR401APCReply
	(*SetOperationVarsRequest)(nil),   // 2: api.control_network.SetOperationVarsRequest
	(*SetOperationVarsReply)(nil),     // 3: api.control_network.SetOperationVarsReply
	(*ConfirmReactorPerfRequest)(nil), // 4: api.control_network.ConfirmReactorPerfRequest
	(*ConfirmReactorPerfReply)(nil),   // 5: api.control_network.ConfirmReactorPerfReply
	(*GetReactorPerfRequest)(nil),     // 6: api.control_network.GetReactorPerfRequest
	(*GetReactorPerfReply)(nil),       // 7: api.control_network.GetReactorPerfReply
}
var file_control_net_control_network_proto_depIdxs = []int32{
	0, // 0: api.control_network.ControlNet.SetR401APC:input_type -> api.control_network.SetR401APCRequest
	2, // 1: api.control_network.ControlNet.SetOperationVars:input_type -> api.control_network.SetOperationVarsRequest
	4, // 2: api.control_network.ControlNet.ConfirmReactorPerf:input_type -> api.control_network.ConfirmReactorPerfRequest
	6, // 3: api.control_network.ControlNet.GetReactorPerf:input_type -> api.control_network.GetReactorPerfRequest
	1, // 4: api.control_network.ControlNet.SetR401APC:output_type -> api.control_network.SetR401APCReply
	3, // 5: api.control_network.ControlNet.SetOperationVars:output_type -> api.control_network.SetOperationVarsReply
	5, // 6: api.control_network.ControlNet.ConfirmReactorPerf:output_type -> api.control_network.ConfirmReactorPerfReply
	7, // 7: api.control_network.ControlNet.GetReactorPerf:output_type -> api.control_network.GetReactorPerfReply
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_control_net_control_network_proto_init() }
func file_control_net_control_network_proto_init() {
	if File_control_net_control_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_control_net_control_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetR401APCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_net_control_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetR401APCReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_net_control_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOperationVarsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_net_control_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetOperationVarsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_net_control_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmReactorPerfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_net_control_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfirmReactorPerfReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_net_control_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReactorPerfRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_control_net_control_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetReactorPerfReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_control_net_control_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_control_net_control_network_proto_goTypes,
		DependencyIndexes: file_control_net_control_network_proto_depIdxs,
		MessageInfos:      file_control_net_control_network_proto_msgTypes,
	}.Build()
	File_control_net_control_network_proto = out.File
	file_control_net_control_network_proto_rawDesc = nil
	file_control_net_control_network_proto_goTypes = nil
	file_control_net_control_network_proto_depIdxs = nil
}
