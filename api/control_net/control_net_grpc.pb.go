// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: control_net/control_net.proto

package control_net

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ControlNet_GetR401APC_FullMethodName            = "/api.control_net.ControlNet/GetR401APC"
	ControlNet_GetOperationVars_FullMethodName      = "/api.control_net.ControlNet/GetOperationVars"
	ControlNet_GetReactorPerformance_FullMethodName = "/api.control_net.ControlNet/GetReactorPerformance"
	ControlNet_SetR401APC_FullMethodName            = "/api.control_net.ControlNet/SetR401APC"
	ControlNet_SetOperationVars_FullMethodName      = "/api.control_net.ControlNet/SetOperationVars"
	ControlNet_ConfirmReactorPerf_FullMethodName    = "/api.control_net.ControlNet/ConfirmReactorPerf"
	ControlNet_GetReactorPerf_FullMethodName        = "/api.control_net.ControlNet/GetReactorPerf"
)

// ControlNetClient is the client API for ControlNet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlNetClient interface {
	GetR401APC(ctx context.Context, in *GetR401Request, opts ...grpc.CallOption) (*GetR401Reply, error)
	GetOperationVars(ctx context.Context, in *GetOperationVarsRequest, opts ...grpc.CallOption) (*GetOperationVarsReply, error)
	GetReactorPerformance(ctx context.Context, in *GetReactorPerformanceRequest, opts ...grpc.CallOption) (*GetReactorPerformanceReply, error)
	SetR401APC(ctx context.Context, in *SetR401APCRequest, opts ...grpc.CallOption) (*SetR401APCReply, error)
	SetOperationVars(ctx context.Context, in *SetOperationVarsRequest, opts ...grpc.CallOption) (*SetOperationVarsReply, error)
	ConfirmReactorPerf(ctx context.Context, in *ConfirmReactorPerfRequest, opts ...grpc.CallOption) (*ConfirmReactorPerfReply, error)
	GetReactorPerf(ctx context.Context, in *GetReactorPerfRequest, opts ...grpc.CallOption) (*GetReactorPerfReply, error)
}

type controlNetClient struct {
	cc grpc.ClientConnInterface
}

func NewControlNetClient(cc grpc.ClientConnInterface) ControlNetClient {
	return &controlNetClient{cc}
}

func (c *controlNetClient) GetR401APC(ctx context.Context, in *GetR401Request, opts ...grpc.CallOption) (*GetR401Reply, error) {
	out := new(GetR401Reply)
	err := c.cc.Invoke(ctx, ControlNet_GetR401APC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlNetClient) GetOperationVars(ctx context.Context, in *GetOperationVarsRequest, opts ...grpc.CallOption) (*GetOperationVarsReply, error) {
	out := new(GetOperationVarsReply)
	err := c.cc.Invoke(ctx, ControlNet_GetOperationVars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlNetClient) GetReactorPerformance(ctx context.Context, in *GetReactorPerformanceRequest, opts ...grpc.CallOption) (*GetReactorPerformanceReply, error) {
	out := new(GetReactorPerformanceReply)
	err := c.cc.Invoke(ctx, ControlNet_GetReactorPerformance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlNetClient) SetR401APC(ctx context.Context, in *SetR401APCRequest, opts ...grpc.CallOption) (*SetR401APCReply, error) {
	out := new(SetR401APCReply)
	err := c.cc.Invoke(ctx, ControlNet_SetR401APC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlNetClient) SetOperationVars(ctx context.Context, in *SetOperationVarsRequest, opts ...grpc.CallOption) (*SetOperationVarsReply, error) {
	out := new(SetOperationVarsReply)
	err := c.cc.Invoke(ctx, ControlNet_SetOperationVars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlNetClient) ConfirmReactorPerf(ctx context.Context, in *ConfirmReactorPerfRequest, opts ...grpc.CallOption) (*ConfirmReactorPerfReply, error) {
	out := new(ConfirmReactorPerfReply)
	err := c.cc.Invoke(ctx, ControlNet_ConfirmReactorPerf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controlNetClient) GetReactorPerf(ctx context.Context, in *GetReactorPerfRequest, opts ...grpc.CallOption) (*GetReactorPerfReply, error) {
	out := new(GetReactorPerfReply)
	err := c.cc.Invoke(ctx, ControlNet_GetReactorPerf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ControlNetServer is the server API for ControlNet service.
// All implementations must embed UnimplementedControlNetServer
// for forward compatibility
type ControlNetServer interface {
	GetR401APC(context.Context, *GetR401Request) (*GetR401Reply, error)
	GetOperationVars(context.Context, *GetOperationVarsRequest) (*GetOperationVarsReply, error)
	GetReactorPerformance(context.Context, *GetReactorPerformanceRequest) (*GetReactorPerformanceReply, error)
	SetR401APC(context.Context, *SetR401APCRequest) (*SetR401APCReply, error)
	SetOperationVars(context.Context, *SetOperationVarsRequest) (*SetOperationVarsReply, error)
	ConfirmReactorPerf(context.Context, *ConfirmReactorPerfRequest) (*ConfirmReactorPerfReply, error)
	GetReactorPerf(context.Context, *GetReactorPerfRequest) (*GetReactorPerfReply, error)
	mustEmbedUnimplementedControlNetServer()
}

// UnimplementedControlNetServer must be embedded to have forward compatible implementations.
type UnimplementedControlNetServer struct {
}

func (UnimplementedControlNetServer) GetR401APC(context.Context, *GetR401Request) (*GetR401Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetR401APC not implemented")
}
func (UnimplementedControlNetServer) GetOperationVars(context.Context, *GetOperationVarsRequest) (*GetOperationVarsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationVars not implemented")
}
func (UnimplementedControlNetServer) GetReactorPerformance(context.Context, *GetReactorPerformanceRequest) (*GetReactorPerformanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactorPerformance not implemented")
}
func (UnimplementedControlNetServer) SetR401APC(context.Context, *SetR401APCRequest) (*SetR401APCReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetR401APC not implemented")
}
func (UnimplementedControlNetServer) SetOperationVars(context.Context, *SetOperationVarsRequest) (*SetOperationVarsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetOperationVars not implemented")
}
func (UnimplementedControlNetServer) ConfirmReactorPerf(context.Context, *ConfirmReactorPerfRequest) (*ConfirmReactorPerfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmReactorPerf not implemented")
}
func (UnimplementedControlNetServer) GetReactorPerf(context.Context, *GetReactorPerfRequest) (*GetReactorPerfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactorPerf not implemented")
}
func (UnimplementedControlNetServer) mustEmbedUnimplementedControlNetServer() {}

// UnsafeControlNetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlNetServer will
// result in compilation errors.
type UnsafeControlNetServer interface {
	mustEmbedUnimplementedControlNetServer()
}

func RegisterControlNetServer(s grpc.ServiceRegistrar, srv ControlNetServer) {
	s.RegisterService(&ControlNet_ServiceDesc, srv)
}

func _ControlNet_GetR401APC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetR401Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlNetServer).GetR401APC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlNet_GetR401APC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlNetServer).GetR401APC(ctx, req.(*GetR401Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlNet_GetOperationVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlNetServer).GetOperationVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlNet_GetOperationVars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlNetServer).GetOperationVars(ctx, req.(*GetOperationVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlNet_GetReactorPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReactorPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlNetServer).GetReactorPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlNet_GetReactorPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlNetServer).GetReactorPerformance(ctx, req.(*GetReactorPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlNet_SetR401APC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetR401APCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlNetServer).SetR401APC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlNet_SetR401APC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlNetServer).SetR401APC(ctx, req.(*SetR401APCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlNet_SetOperationVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetOperationVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlNetServer).SetOperationVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlNet_SetOperationVars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlNetServer).SetOperationVars(ctx, req.(*SetOperationVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlNet_ConfirmReactorPerf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReactorPerfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlNetServer).ConfirmReactorPerf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlNet_ConfirmReactorPerf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlNetServer).ConfirmReactorPerf(ctx, req.(*ConfirmReactorPerfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ControlNet_GetReactorPerf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReactorPerfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControlNetServer).GetReactorPerf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ControlNet_GetReactorPerf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControlNetServer).GetReactorPerf(ctx, req.(*GetReactorPerfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ControlNet_ServiceDesc is the grpc.ServiceDesc for ControlNet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlNet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.control_net.ControlNet",
	HandlerType: (*ControlNetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetR401APC",
			Handler:    _ControlNet_GetR401APC_Handler,
		},
		{
			MethodName: "GetOperationVars",
			Handler:    _ControlNet_GetOperationVars_Handler,
		},
		{
			MethodName: "GetReactorPerformance",
			Handler:    _ControlNet_GetReactorPerformance_Handler,
		},
		{
			MethodName: "SetR401APC",
			Handler:    _ControlNet_SetR401APC_Handler,
		},
		{
			MethodName: "SetOperationVars",
			Handler:    _ControlNet_SetOperationVars_Handler,
		},
		{
			MethodName: "ConfirmReactorPerf",
			Handler:    _ControlNet_ConfirmReactorPerf_Handler,
		},
		{
			MethodName: "GetReactorPerf",
			Handler:    _ControlNet_GetReactorPerf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "control_net/control_net.proto",
}
