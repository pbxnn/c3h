// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.19.1
// source: product_net/product_network.proto

package product_net

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SwitchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SwitchRequest) Reset() {
	*x = SwitchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchRequest) ProtoMessage() {}

func (x *SwitchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchRequest.ProtoReflect.Descriptor instead.
func (*SwitchRequest) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{0}
}

type SwitchReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data *SwitchReplyData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *SwitchReply) Reset() {
	*x = SwitchReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchReply) ProtoMessage() {}

func (x *SwitchReply) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchReply.ProtoReflect.Descriptor instead.
func (*SwitchReply) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{1}
}

func (x *SwitchReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SwitchReply) GetData() *SwitchReplyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type SwitchReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DC_402_Total  *SwitchDetail `protobuf:"bytes,1,opt,name=DC_402_Total,json=DC402Total,proto3" json:"DC_402_Total,omitempty"`
	DC_402_Manual *SwitchDetail `protobuf:"bytes,2,opt,name=DC_402_Manual,json=DC402Manual,proto3" json:"DC_402_Manual,omitempty"`
	DC_402_AB     *SwitchDetail `protobuf:"bytes,3,opt,name=DC_402_AB,json=DC402AB,proto3" json:"DC_402_AB,omitempty"`
	MAPDExport    *SwitchDetail `protobuf:"bytes,4,opt,name=MAPD_export,json=MAPDExport,proto3" json:"MAPD_export,omitempty"`
	Drier         *SwitchDetail `protobuf:"bytes,5,opt,name=drier,proto3" json:"drier,omitempty"`
	Communication *SwitchDetail `protobuf:"bytes,6,opt,name=communication,proto3" json:"communication,omitempty"`
}

func (x *SwitchReplyData) Reset() {
	*x = SwitchReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchReplyData) ProtoMessage() {}

func (x *SwitchReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchReplyData.ProtoReflect.Descriptor instead.
func (*SwitchReplyData) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{2}
}

func (x *SwitchReplyData) GetDC_402_Total() *SwitchDetail {
	if x != nil {
		return x.DC_402_Total
	}
	return nil
}

func (x *SwitchReplyData) GetDC_402_Manual() *SwitchDetail {
	if x != nil {
		return x.DC_402_Manual
	}
	return nil
}

func (x *SwitchReplyData) GetDC_402_AB() *SwitchDetail {
	if x != nil {
		return x.DC_402_AB
	}
	return nil
}

func (x *SwitchReplyData) GetMAPDExport() *SwitchDetail {
	if x != nil {
		return x.MAPDExport
	}
	return nil
}

func (x *SwitchReplyData) GetDrier() *SwitchDetail {
	if x != nil {
		return x.Drier
	}
	return nil
}

func (x *SwitchReplyData) GetCommunication() *SwitchDetail {
	if x != nil {
		return x.Communication
	}
	return nil
}

type SwitchDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *SwitchDetail) Reset() {
	*x = SwitchDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDetail) ProtoMessage() {}

func (x *SwitchDetail) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDetail.ProtoReflect.Descriptor instead.
func (*SwitchDetail) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{3}
}

func (x *SwitchDetail) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *SwitchDetail) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type ControlVarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ControlVarRequest) Reset() {
	*x = ControlVarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlVarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlVarRequest) ProtoMessage() {}

func (x *ControlVarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlVarRequest.ProtoReflect.Descriptor instead.
func (*ControlVarRequest) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{4}
}

type ControlVarReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data *VarReplyData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ControlVarReply) Reset() {
	*x = ControlVarReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlVarReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlVarReply) ProtoMessage() {}

func (x *ControlVarReply) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlVarReply.ProtoReflect.Descriptor instead.
func (*ControlVarReply) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{5}
}

func (x *ControlVarReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ControlVarReply) GetData() *VarReplyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ControlledVarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ControlledVarRequest) Reset() {
	*x = ControlledVarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlledVarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlledVarRequest) ProtoMessage() {}

func (x *ControlledVarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlledVarRequest.ProtoReflect.Descriptor instead.
func (*ControlledVarRequest) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{6}
}

type ControlledVarReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data *VarReplyData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ControlledVarReply) Reset() {
	*x = ControlledVarReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlledVarReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlledVarReply) ProtoMessage() {}

func (x *ControlledVarReply) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlledVarReply.ProtoReflect.Descriptor instead.
func (*ControlledVarReply) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{7}
}

func (x *ControlledVarReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ControlledVarReply) GetData() *VarReplyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type ConfoundingVarRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfoundingVarRequest) Reset() {
	*x = ConfoundingVarRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfoundingVarRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfoundingVarRequest) ProtoMessage() {}

func (x *ConfoundingVarRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfoundingVarRequest.ProtoReflect.Descriptor instead.
func (*ConfoundingVarRequest) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{8}
}

type ConfoundingVarReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data *VarReplyData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ConfoundingVarReply) Reset() {
	*x = ConfoundingVarReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfoundingVarReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfoundingVarReply) ProtoMessage() {}

func (x *ConfoundingVarReply) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfoundingVarReply.ProtoReflect.Descriptor instead.
func (*ConfoundingVarReply) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{9}
}

func (x *ConfoundingVarReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ConfoundingVarReply) GetData() *VarReplyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type CatalystRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CatalystRequest) Reset() {
	*x = CatalystRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalystRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalystRequest) ProtoMessage() {}

func (x *CatalystRequest) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalystRequest.ProtoReflect.Descriptor instead.
func (*CatalystRequest) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{10}
}

type CatalystReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code int32         `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data *VarReplyData `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CatalystReply) Reset() {
	*x = CatalystReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CatalystReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CatalystReply) ProtoMessage() {}

func (x *CatalystReply) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CatalystReply.ProtoReflect.Descriptor instead.
func (*CatalystReply) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{11}
}

func (x *CatalystReply) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *CatalystReply) GetData() *VarReplyData {
	if x != nil {
		return x.Data
	}
	return nil
}

type VarReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*VarDetail `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *VarReplyData) Reset() {
	*x = VarReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarReplyData) ProtoMessage() {}

func (x *VarReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarReplyData.ProtoReflect.Descriptor instead.
func (*VarReplyData) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{12}
}

func (x *VarReplyData) GetList() []*VarDetail {
	if x != nil {
		return x.List
	}
	return nil
}

type VarDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Desc      string  `protobuf:"bytes,2,opt,name=desc,proto3" json:"desc,omitempty"`
	RealValue float64 `protobuf:"fixed64,3,opt,name=real_value,json=realValue,proto3" json:"real_value,omitempty"`
	SetValue  float64 `protobuf:"fixed64,4,opt,name=set_value,json=setValue,proto3" json:"set_value,omitempty"`
	LowLimit  float64 `protobuf:"fixed64,5,opt,name=low_limit,json=lowLimit,proto3" json:"low_limit,omitempty"`
	HighLimit float64 `protobuf:"fixed64,6,opt,name=high_limit,json=highLimit,proto3" json:"high_limit,omitempty"`
	Unit      string  `protobuf:"bytes,7,opt,name=unit,proto3" json:"unit,omitempty"`
}

func (x *VarDetail) Reset() {
	*x = VarDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_product_net_product_network_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarDetail) ProtoMessage() {}

func (x *VarDetail) ProtoReflect() protoreflect.Message {
	mi := &file_product_net_product_network_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarDetail.ProtoReflect.Descriptor instead.
func (*VarDetail) Descriptor() ([]byte, []int) {
	return file_product_net_product_network_proto_rawDescGZIP(), []int{13}
}

func (x *VarDetail) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *VarDetail) GetDesc() string {
	if x != nil {
		return x.Desc
	}
	return ""
}

func (x *VarDetail) GetRealValue() float64 {
	if x != nil {
		return x.RealValue
	}
	return 0
}

func (x *VarDetail) GetSetValue() float64 {
	if x != nil {
		return x.SetValue
	}
	return 0
}

func (x *VarDetail) GetLowLimit() float64 {
	if x != nil {
		return x.LowLimit
	}
	return 0
}

func (x *VarDetail) GetHighLimit() float64 {
	if x != nil {
		return x.HighLimit
	}
	return 0
}

func (x *VarDetail) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

var File_product_net_product_network_proto protoreflect.FileDescriptor

var file_product_net_product_network_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2f, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x57, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x8a, 0x03, 0x0a,
	0x0f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3f, 0x0a, 0x0c, 0x44, 0x43, 0x5f, 0x34, 0x30, 0x32, 0x5f, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0a, 0x44, 0x43, 0x34, 0x30, 0x32, 0x54, 0x6f, 0x74, 0x61,
	0x6c, 0x12, 0x41, 0x0a, 0x0d, 0x44, 0x43, 0x5f, 0x34, 0x30, 0x32, 0x5f, 0x4d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0b, 0x44, 0x43, 0x34, 0x30, 0x32, 0x4d, 0x61,
	0x6e, 0x75, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x09, 0x44, 0x43, 0x5f, 0x34, 0x30, 0x32, 0x5f, 0x41,
	0x42, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x43, 0x34, 0x30, 0x32, 0x41, 0x42, 0x12,
	0x3e, 0x0a, 0x0b, 0x4d, 0x41, 0x50, 0x44, 0x5f, 0x65, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x0a, 0x4d, 0x41, 0x50, 0x44, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x33, 0x0a, 0x05, 0x64, 0x72, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x64,
	0x72, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x6d,
	0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x36, 0x0a, 0x0c, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x58, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x56, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x56, 0x61,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x16, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5b, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e,
	0x65, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x75, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x5c,
	0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x56, 0x0a, 0x0d, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3e, 0x0a, 0x0c, 0x56, 0x61, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x65, 0x73,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x65, 0x73, 0x63, 0x12, 0x1d, 0x0a,
	0x0a, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x77,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x6f,
	0x77, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x69, 0x67, 0x68, 0x5f, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x68, 0x69, 0x67, 0x68,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x32, 0x8b, 0x05, 0x0a, 0x0a, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x65, 0x74, 0x12, 0x6e, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x12,
	0x17, 0x2f, 0x63, 0x33, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x6e, 0x65,
	0x74, 0x2f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x7d, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x72, 0x73, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x56, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x63, 0x33, 0x68, 0x2f, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x2d, 0x76, 0x61, 0x72, 0x73, 0x12, 0x89, 0x01, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x72, 0x73, 0x12, 0x25, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x56, 0x61, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65,
	0x64, 0x56, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x12, 0x20, 0x2f, 0x63, 0x33, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d,
	0x6e, 0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x64, 0x2d, 0x76,
	0x61, 0x72, 0x73, 0x12, 0x8d, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x73, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x29, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23,
	0x12, 0x21, 0x2f, 0x63, 0x33, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x6e,
	0x65, 0x74, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x2d, 0x76,
	0x61, 0x72, 0x73, 0x12, 0x72, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x79,
	0x73, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x12, 0x19, 0x2f, 0x63,
	0x33, 0x68, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x2d, 0x6e, 0x65, 0x74, 0x2f, 0x63,
	0x61, 0x74, 0x61, 0x6c, 0x79, 0x73, 0x74, 0x42, 0x34, 0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x50, 0x01, 0x5a, 0x1f, 0x63, 0x33,
	0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65,
	0x74, 0x3b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x65, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_product_net_product_network_proto_rawDescOnce sync.Once
	file_product_net_product_network_proto_rawDescData = file_product_net_product_network_proto_rawDesc
)

func file_product_net_product_network_proto_rawDescGZIP() []byte {
	file_product_net_product_network_proto_rawDescOnce.Do(func() {
		file_product_net_product_network_proto_rawDescData = protoimpl.X.CompressGZIP(file_product_net_product_network_proto_rawDescData)
	})
	return file_product_net_product_network_proto_rawDescData
}

var file_product_net_product_network_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_product_net_product_network_proto_goTypes = []interface{}{
	(*SwitchRequest)(nil),         // 0: api.product_net.SwitchRequest
	(*SwitchReply)(nil),           // 1: api.product_net.SwitchReply
	(*SwitchReplyData)(nil),       // 2: api.product_net.SwitchReplyData
	(*SwitchDetail)(nil),          // 3: api.product_net.SwitchDetail
	(*ControlVarRequest)(nil),     // 4: api.product_net.ControlVarRequest
	(*ControlVarReply)(nil),       // 5: api.product_net.ControlVarReply
	(*ControlledVarRequest)(nil),  // 6: api.product_net.ControlledVarRequest
	(*ControlledVarReply)(nil),    // 7: api.product_net.ControlledVarReply
	(*ConfoundingVarRequest)(nil), // 8: api.product_net.ConfoundingVarRequest
	(*ConfoundingVarReply)(nil),   // 9: api.product_net.ConfoundingVarReply
	(*CatalystRequest)(nil),       // 10: api.product_net.CatalystRequest
	(*CatalystReply)(nil),         // 11: api.product_net.CatalystReply
	(*VarReplyData)(nil),          // 12: api.product_net.VarReplyData
	(*VarDetail)(nil),             // 13: api.product_net.VarDetail
}
var file_product_net_product_network_proto_depIdxs = []int32{
	2,  // 0: api.product_net.SwitchReply.data:type_name -> api.product_net.SwitchReplyData
	3,  // 1: api.product_net.SwitchReplyData.DC_402_Total:type_name -> api.product_net.SwitchDetail
	3,  // 2: api.product_net.SwitchReplyData.DC_402_Manual:type_name -> api.product_net.SwitchDetail
	3,  // 3: api.product_net.SwitchReplyData.DC_402_AB:type_name -> api.product_net.SwitchDetail
	3,  // 4: api.product_net.SwitchReplyData.MAPD_export:type_name -> api.product_net.SwitchDetail
	3,  // 5: api.product_net.SwitchReplyData.drier:type_name -> api.product_net.SwitchDetail
	3,  // 6: api.product_net.SwitchReplyData.communication:type_name -> api.product_net.SwitchDetail
	12, // 7: api.product_net.ControlVarReply.data:type_name -> api.product_net.VarReplyData
	12, // 8: api.product_net.ControlledVarReply.data:type_name -> api.product_net.VarReplyData
	12, // 9: api.product_net.ConfoundingVarReply.data:type_name -> api.product_net.VarReplyData
	12, // 10: api.product_net.CatalystReply.data:type_name -> api.product_net.VarReplyData
	13, // 11: api.product_net.VarReplyData.list:type_name -> api.product_net.VarDetail
	0,  // 12: api.product_net.ProductNet.GetSwitchInfo:input_type -> api.product_net.SwitchRequest
	4,  // 13: api.product_net.ProductNet.GetControlVars:input_type -> api.product_net.ControlVarRequest
	6,  // 14: api.product_net.ProductNet.GetControlledVars:input_type -> api.product_net.ControlledVarRequest
	8,  // 15: api.product_net.ProductNet.GetConfoundingVars:input_type -> api.product_net.ConfoundingVarRequest
	10, // 16: api.product_net.ProductNet.GetCatalyst:input_type -> api.product_net.CatalystRequest
	1,  // 17: api.product_net.ProductNet.GetSwitchInfo:output_type -> api.product_net.SwitchReply
	5,  // 18: api.product_net.ProductNet.GetControlVars:output_type -> api.product_net.ControlVarReply
	7,  // 19: api.product_net.ProductNet.GetControlledVars:output_type -> api.product_net.ControlledVarReply
	9,  // 20: api.product_net.ProductNet.GetConfoundingVars:output_type -> api.product_net.ConfoundingVarReply
	11, // 21: api.product_net.ProductNet.GetCatalyst:output_type -> api.product_net.CatalystReply
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_product_net_product_network_proto_init() }
func file_product_net_product_network_proto_init() {
	if File_product_net_product_network_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_product_net_product_network_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlVarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlVarReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlledVarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControlledVarReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfoundingVarRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfoundingVarReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatalystRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CatalystReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_product_net_product_network_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_product_net_product_network_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_product_net_product_network_proto_goTypes,
		DependencyIndexes: file_product_net_product_network_proto_depIdxs,
		MessageInfos:      file_product_net_product_network_proto_msgTypes,
	}.Build()
	File_product_net_product_network_proto = out.File
	file_product_net_product_network_proto_rawDesc = nil
	file_product_net_product_network_proto_goTypes = nil
	file_product_net_product_network_proto_depIdxs = nil
}
