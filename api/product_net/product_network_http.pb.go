// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.1
// source: product_net/product_network.proto

package product_net

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationProductNetGetCatalyst = "/api.product_net.ProductNet/GetCatalyst"
const OperationProductNetGetConfoundingVars = "/api.product_net.ProductNet/GetConfoundingVars"
const OperationProductNetGetControlVars = "/api.product_net.ProductNet/GetControlVars"
const OperationProductNetGetControlledVars = "/api.product_net.ProductNet/GetControlledVars"
const OperationProductNetGetSwitchInfo = "/api.product_net.ProductNet/GetSwitchInfo"

type ProductNetHTTPServer interface {
	GetCatalyst(context.Context, *CatalystRequest) (*CatalystReply, error)
	GetConfoundingVars(context.Context, *ConfoundingVarRequest) (*ConfoundingVarReply, error)
	GetControlVars(context.Context, *ControlVarRequest) (*ControlVarReply, error)
	GetControlledVars(context.Context, *ControlledVarRequest) (*ControlledVarReply, error)
	GetSwitchInfo(context.Context, *SwitchRequest) (*SwitchReply, error)
}

func RegisterProductNetHTTPServer(s *http.Server, srv ProductNetHTTPServer) {
	r := s.Route("/")
	r.GET("/c3h/product-net/switch", _ProductNet_GetSwitchInfo0_HTTP_Handler(srv))
	r.GET("/c3h/product-net/control-vars", _ProductNet_GetControlVars0_HTTP_Handler(srv))
	r.GET("/c3h/product-net/controlled-vars", _ProductNet_GetControlledVars0_HTTP_Handler(srv))
	r.GET("/c3h/product-net/confounding-vars", _ProductNet_GetConfoundingVars0_HTTP_Handler(srv))
	r.GET("/c3h/product-net/catalyst", _ProductNet_GetCatalyst0_HTTP_Handler(srv))
}

func _ProductNet_GetSwitchInfo0_HTTP_Handler(srv ProductNetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SwitchRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductNetGetSwitchInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSwitchInfo(ctx, req.(*SwitchRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SwitchReply)
		return ctx.Result(200, reply)
	}
}

func _ProductNet_GetControlVars0_HTTP_Handler(srv ProductNetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ControlVarRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductNetGetControlVars)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetControlVars(ctx, req.(*ControlVarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ControlVarReply)
		return ctx.Result(200, reply)
	}
}

func _ProductNet_GetControlledVars0_HTTP_Handler(srv ProductNetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ControlledVarRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductNetGetControlledVars)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetControlledVars(ctx, req.(*ControlledVarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ControlledVarReply)
		return ctx.Result(200, reply)
	}
}

func _ProductNet_GetConfoundingVars0_HTTP_Handler(srv ProductNetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ConfoundingVarRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductNetGetConfoundingVars)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetConfoundingVars(ctx, req.(*ConfoundingVarRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ConfoundingVarReply)
		return ctx.Result(200, reply)
	}
}

func _ProductNet_GetCatalyst0_HTTP_Handler(srv ProductNetHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CatalystRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationProductNetGetCatalyst)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetCatalyst(ctx, req.(*CatalystRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CatalystReply)
		return ctx.Result(200, reply)
	}
}

type ProductNetHTTPClient interface {
	GetCatalyst(ctx context.Context, req *CatalystRequest, opts ...http.CallOption) (rsp *CatalystReply, err error)
	GetConfoundingVars(ctx context.Context, req *ConfoundingVarRequest, opts ...http.CallOption) (rsp *ConfoundingVarReply, err error)
	GetControlVars(ctx context.Context, req *ControlVarRequest, opts ...http.CallOption) (rsp *ControlVarReply, err error)
	GetControlledVars(ctx context.Context, req *ControlledVarRequest, opts ...http.CallOption) (rsp *ControlledVarReply, err error)
	GetSwitchInfo(ctx context.Context, req *SwitchRequest, opts ...http.CallOption) (rsp *SwitchReply, err error)
}

type ProductNetHTTPClientImpl struct {
	cc *http.Client
}

func NewProductNetHTTPClient(client *http.Client) ProductNetHTTPClient {
	return &ProductNetHTTPClientImpl{client}
}

func (c *ProductNetHTTPClientImpl) GetCatalyst(ctx context.Context, in *CatalystRequest, opts ...http.CallOption) (*CatalystReply, error) {
	var out CatalystReply
	pattern := "/c3h/product-net/catalyst"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductNetGetCatalyst))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductNetHTTPClientImpl) GetConfoundingVars(ctx context.Context, in *ConfoundingVarRequest, opts ...http.CallOption) (*ConfoundingVarReply, error) {
	var out ConfoundingVarReply
	pattern := "/c3h/product-net/confounding-vars"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductNetGetConfoundingVars))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductNetHTTPClientImpl) GetControlVars(ctx context.Context, in *ControlVarRequest, opts ...http.CallOption) (*ControlVarReply, error) {
	var out ControlVarReply
	pattern := "/c3h/product-net/control-vars"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductNetGetControlVars))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductNetHTTPClientImpl) GetControlledVars(ctx context.Context, in *ControlledVarRequest, opts ...http.CallOption) (*ControlledVarReply, error) {
	var out ControlledVarReply
	pattern := "/c3h/product-net/controlled-vars"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductNetGetControlledVars))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ProductNetHTTPClientImpl) GetSwitchInfo(ctx context.Context, in *SwitchRequest, opts ...http.CallOption) (*SwitchReply, error) {
	var out SwitchReply
	pattern := "/c3h/product-net/switch"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationProductNetGetSwitchInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
