// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.1
// source: platform/platform.proto

package platform

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPlatformCollectData = "/api.platform.Platform/CollectData"

type PlatformHTTPServer interface {
	CollectData(context.Context, *CollectDataRequest) (*CollectDataReply, error)
}

func RegisterPlatformHTTPServer(s *http.Server, srv PlatformHTTPServer) {
	r := s.Route("/")
	r.GET("/c3h/platform/collect-data", _Platform_CollectData0_HTTP_Handler(srv))
}

func _Platform_CollectData0_HTTP_Handler(srv PlatformHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CollectDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPlatformCollectData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CollectData(ctx, req.(*CollectDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CollectDataReply)
		return ctx.Result(200, reply)
	}
}

type PlatformHTTPClient interface {
	CollectData(ctx context.Context, req *CollectDataRequest, opts ...http.CallOption) (rsp *CollectDataReply, err error)
}

type PlatformHTTPClientImpl struct {
	cc *http.Client
}

func NewPlatformHTTPClient(client *http.Client) PlatformHTTPClient {
	return &PlatformHTTPClientImpl{client}
}

func (c *PlatformHTTPClientImpl) CollectData(ctx context.Context, in *CollectDataRequest, opts ...http.CallOption) (*CollectDataReply, error) {
	var out CollectDataReply
	pattern := "/c3h/platform/collect-data"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationPlatformCollectData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
