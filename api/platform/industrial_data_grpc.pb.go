// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: platform/industrial_data.proto

package platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	IndustrialData_GetControllerData_FullMethodName = "/IndustrialData/GetControllerData"
	IndustrialData_GetAllData_FullMethodName        = "/IndustrialData/GetAllData"
)

// IndustrialDataClient is the client API for IndustrialData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IndustrialDataClient interface {
	GetControllerData(ctx context.Context, in *GetControllerDataRequest, opts ...grpc.CallOption) (*GetControllerDataReply, error)
	GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...grpc.CallOption) (*GetAllDataReply, error)
}

type industrialDataClient struct {
	cc grpc.ClientConnInterface
}

func NewIndustrialDataClient(cc grpc.ClientConnInterface) IndustrialDataClient {
	return &industrialDataClient{cc}
}

func (c *industrialDataClient) GetControllerData(ctx context.Context, in *GetControllerDataRequest, opts ...grpc.CallOption) (*GetControllerDataReply, error) {
	out := new(GetControllerDataReply)
	err := c.cc.Invoke(ctx, IndustrialData_GetControllerData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *industrialDataClient) GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...grpc.CallOption) (*GetAllDataReply, error) {
	out := new(GetAllDataReply)
	err := c.cc.Invoke(ctx, IndustrialData_GetAllData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IndustrialDataServer is the server API for IndustrialData service.
// All implementations must embed UnimplementedIndustrialDataServer
// for forward compatibility
type IndustrialDataServer interface {
	GetControllerData(context.Context, *GetControllerDataRequest) (*GetControllerDataReply, error)
	GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataReply, error)
	mustEmbedUnimplementedIndustrialDataServer()
}

// UnimplementedIndustrialDataServer must be embedded to have forward compatible implementations.
type UnimplementedIndustrialDataServer struct {
}

func (UnimplementedIndustrialDataServer) GetControllerData(context.Context, *GetControllerDataRequest) (*GetControllerDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetControllerData not implemented")
}
func (UnimplementedIndustrialDataServer) GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllData not implemented")
}
func (UnimplementedIndustrialDataServer) mustEmbedUnimplementedIndustrialDataServer() {}

// UnsafeIndustrialDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndustrialDataServer will
// result in compilation errors.
type UnsafeIndustrialDataServer interface {
	mustEmbedUnimplementedIndustrialDataServer()
}

func RegisterIndustrialDataServer(s grpc.ServiceRegistrar, srv IndustrialDataServer) {
	s.RegisterService(&IndustrialData_ServiceDesc, srv)
}

func _IndustrialData_GetControllerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetControllerDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndustrialDataServer).GetControllerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndustrialData_GetControllerData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndustrialDataServer).GetControllerData(ctx, req.(*GetControllerDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndustrialData_GetAllData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndustrialDataServer).GetAllData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndustrialData_GetAllData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndustrialDataServer).GetAllData(ctx, req.(*GetAllDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IndustrialData_ServiceDesc is the grpc.ServiceDesc for IndustrialData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndustrialData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "IndustrialData",
	HandlerType: (*IndustrialDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetControllerData",
			Handler:    _IndustrialData_GetControllerData_Handler,
		},
		{
			MethodName: "GetAllData",
			Handler:    _IndustrialData_GetAllData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/industrial_data.proto",
}
