// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: platform/platform.proto

package platform

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductNet_CollectData_FullMethodName = "/api.platform.ProductNet/CollectData"
)

// ProductNetClient is the client API for ProductNet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductNetClient interface {
	CollectData(ctx context.Context, in *CollectDataRequest, opts ...grpc.CallOption) (*CollectDataReply, error)
}

type productNetClient struct {
	cc grpc.ClientConnInterface
}

func NewProductNetClient(cc grpc.ClientConnInterface) ProductNetClient {
	return &productNetClient{cc}
}

func (c *productNetClient) CollectData(ctx context.Context, in *CollectDataRequest, opts ...grpc.CallOption) (*CollectDataReply, error) {
	out := new(CollectDataReply)
	err := c.cc.Invoke(ctx, ProductNet_CollectData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductNetServer is the server API for ProductNet service.
// All implementations must embed UnimplementedProductNetServer
// for forward compatibility
type ProductNetServer interface {
	CollectData(context.Context, *CollectDataRequest) (*CollectDataReply, error)
	mustEmbedUnimplementedProductNetServer()
}

// UnimplementedProductNetServer must be embedded to have forward compatible implementations.
type UnimplementedProductNetServer struct {
}

func (UnimplementedProductNetServer) CollectData(context.Context, *CollectDataRequest) (*CollectDataReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CollectData not implemented")
}
func (UnimplementedProductNetServer) mustEmbedUnimplementedProductNetServer() {}

// UnsafeProductNetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductNetServer will
// result in compilation errors.
type UnsafeProductNetServer interface {
	mustEmbedUnimplementedProductNetServer()
}

func RegisterProductNetServer(s grpc.ServiceRegistrar, srv ProductNetServer) {
	s.RegisterService(&ProductNet_ServiceDesc, srv)
}

func _ProductNet_CollectData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductNetServer).CollectData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProductNet_CollectData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductNetServer).CollectData(ctx, req.(*CollectDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductNet_ServiceDesc is the grpc.ServiceDesc for ProductNet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductNet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.platform.ProductNet",
	HandlerType: (*ProductNetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CollectData",
			Handler:    _ProductNet_CollectData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "platform/platform.proto",
}
