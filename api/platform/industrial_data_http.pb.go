// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.6.3
// - protoc             v3.19.1
// source: platform/industrial_data.proto

package platform

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationIndustrialDataGetAllData = "/IndustrialData/GetAllData"
const OperationIndustrialDataGetControllerData = "/IndustrialData/GetControllerData"

type IndustrialDataHTTPServer interface {
	GetAllData(context.Context, *GetAllDataRequest) (*GetAllDataReply, error)
	GetControllerData(context.Context, *GetControllerDataRequest) (*GetControllerDataReply, error)
}

func RegisterIndustrialDataHTTPServer(s *http.Server, srv IndustrialDataHTTPServer) {
	r := s.Route("/")
	r.GET("/c3h/industrial/controller", _IndustrialData_GetControllerData0_HTTP_Handler(srv))
	r.GET("/c3h/industrial/all", _IndustrialData_GetAllData0_HTTP_Handler(srv))
}

func _IndustrialData_GetControllerData0_HTTP_Handler(srv IndustrialDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetControllerDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIndustrialDataGetControllerData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetControllerData(ctx, req.(*GetControllerDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetControllerDataReply)
		return ctx.Result(200, reply)
	}
}

func _IndustrialData_GetAllData0_HTTP_Handler(srv IndustrialDataHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAllDataRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationIndustrialDataGetAllData)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAllData(ctx, req.(*GetAllDataRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAllDataReply)
		return ctx.Result(200, reply)
	}
}

type IndustrialDataHTTPClient interface {
	GetAllData(ctx context.Context, req *GetAllDataRequest, opts ...http.CallOption) (rsp *GetAllDataReply, err error)
	GetControllerData(ctx context.Context, req *GetControllerDataRequest, opts ...http.CallOption) (rsp *GetControllerDataReply, err error)
}

type IndustrialDataHTTPClientImpl struct {
	cc *http.Client
}

func NewIndustrialDataHTTPClient(client *http.Client) IndustrialDataHTTPClient {
	return &IndustrialDataHTTPClientImpl{client}
}

func (c *IndustrialDataHTTPClientImpl) GetAllData(ctx context.Context, in *GetAllDataRequest, opts ...http.CallOption) (*GetAllDataReply, error) {
	var out GetAllDataReply
	pattern := "/c3h/industrial/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIndustrialDataGetAllData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *IndustrialDataHTTPClientImpl) GetControllerData(ctx context.Context, in *GetControllerDataRequest, opts ...http.CallOption) (*GetControllerDataReply, error) {
	var out GetControllerDataReply
	pattern := "/c3h/industrial/controller"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationIndustrialDataGetControllerData))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
