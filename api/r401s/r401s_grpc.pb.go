// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: r401s/r401s.proto

package r401s

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	R401S_GetAPCControl_FullMethodName         = "/api.r401s.R401S/GetAPCControl"
	R401S_SetAPCControl_FullMethodName         = "/api.r401s.R401S/SetAPCControl"
	R401S_SetControlSwitch_FullMethodName      = "/api.r401s.R401S/SetControlSwitch"
	R401S_Reset_FullMethodName                 = "/api.r401s.R401S/Reset"
	R401S_GetOperationVars_FullMethodName      = "/api.r401s.R401S/GetOperationVars"
	R401S_GetStatusVars_FullMethodName         = "/api.r401s.R401S/GetStatusVars"
	R401S_GetConfoundingVars_FullMethodName    = "/api.r401s.R401S/GetConfoundingVars"
	R401S_GetReactorPerformance_FullMethodName = "/api.r401s.R401S/GetReactorPerformance"
	R401S_ConfirmReactorPerf_FullMethodName    = "/api.r401s.R401S/ConfirmReactorPerf"
)

// R401SClient is the client API for R401S service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type R401SClient interface {
	GetAPCControl(ctx context.Context, in *GetAPCControlRequest, opts ...grpc.CallOption) (*VarListReply, error)
	SetAPCControl(ctx context.Context, in *SetAPCControlRequest, opts ...grpc.CallOption) (*VarReply, error)
	SetControlSwitch(ctx context.Context, in *SetControlSwitchRequest, opts ...grpc.CallOption) (*VarReply, error)
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*VarReply, error)
	GetOperationVars(ctx context.Context, in *GetOperationVarsRequest, opts ...grpc.CallOption) (*VarListReply, error)
	GetStatusVars(ctx context.Context, in *GetStatusVarsRequest, opts ...grpc.CallOption) (*VarListReply, error)
	GetConfoundingVars(ctx context.Context, in *GetConfoundingVarsRequest, opts ...grpc.CallOption) (*VarListReply, error)
	GetReactorPerformance(ctx context.Context, in *GetReactorPerformanceRequest, opts ...grpc.CallOption) (*VarListReply, error)
	ConfirmReactorPerf(ctx context.Context, in *ConfirmReactorPerfRequest, opts ...grpc.CallOption) (*VarListReply, error)
}

type r401SClient struct {
	cc grpc.ClientConnInterface
}

func NewR401SClient(cc grpc.ClientConnInterface) R401SClient {
	return &r401SClient{cc}
}

func (c *r401SClient) GetAPCControl(ctx context.Context, in *GetAPCControlRequest, opts ...grpc.CallOption) (*VarListReply, error) {
	out := new(VarListReply)
	err := c.cc.Invoke(ctx, R401S_GetAPCControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *r401SClient) SetAPCControl(ctx context.Context, in *SetAPCControlRequest, opts ...grpc.CallOption) (*VarReply, error) {
	out := new(VarReply)
	err := c.cc.Invoke(ctx, R401S_SetAPCControl_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *r401SClient) SetControlSwitch(ctx context.Context, in *SetControlSwitchRequest, opts ...grpc.CallOption) (*VarReply, error) {
	out := new(VarReply)
	err := c.cc.Invoke(ctx, R401S_SetControlSwitch_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *r401SClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*VarReply, error) {
	out := new(VarReply)
	err := c.cc.Invoke(ctx, R401S_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *r401SClient) GetOperationVars(ctx context.Context, in *GetOperationVarsRequest, opts ...grpc.CallOption) (*VarListReply, error) {
	out := new(VarListReply)
	err := c.cc.Invoke(ctx, R401S_GetOperationVars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *r401SClient) GetStatusVars(ctx context.Context, in *GetStatusVarsRequest, opts ...grpc.CallOption) (*VarListReply, error) {
	out := new(VarListReply)
	err := c.cc.Invoke(ctx, R401S_GetStatusVars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *r401SClient) GetConfoundingVars(ctx context.Context, in *GetConfoundingVarsRequest, opts ...grpc.CallOption) (*VarListReply, error) {
	out := new(VarListReply)
	err := c.cc.Invoke(ctx, R401S_GetConfoundingVars_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *r401SClient) GetReactorPerformance(ctx context.Context, in *GetReactorPerformanceRequest, opts ...grpc.CallOption) (*VarListReply, error) {
	out := new(VarListReply)
	err := c.cc.Invoke(ctx, R401S_GetReactorPerformance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *r401SClient) ConfirmReactorPerf(ctx context.Context, in *ConfirmReactorPerfRequest, opts ...grpc.CallOption) (*VarListReply, error) {
	out := new(VarListReply)
	err := c.cc.Invoke(ctx, R401S_ConfirmReactorPerf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// R401SServer is the server API for R401S service.
// All implementations must embed UnimplementedR401SServer
// for forward compatibility
type R401SServer interface {
	GetAPCControl(context.Context, *GetAPCControlRequest) (*VarListReply, error)
	SetAPCControl(context.Context, *SetAPCControlRequest) (*VarReply, error)
	SetControlSwitch(context.Context, *SetControlSwitchRequest) (*VarReply, error)
	Reset(context.Context, *ResetRequest) (*VarReply, error)
	GetOperationVars(context.Context, *GetOperationVarsRequest) (*VarListReply, error)
	GetStatusVars(context.Context, *GetStatusVarsRequest) (*VarListReply, error)
	GetConfoundingVars(context.Context, *GetConfoundingVarsRequest) (*VarListReply, error)
	GetReactorPerformance(context.Context, *GetReactorPerformanceRequest) (*VarListReply, error)
	ConfirmReactorPerf(context.Context, *ConfirmReactorPerfRequest) (*VarListReply, error)
	mustEmbedUnimplementedR401SServer()
}

// UnimplementedR401SServer must be embedded to have forward compatible implementations.
type UnimplementedR401SServer struct {
}

func (UnimplementedR401SServer) GetAPCControl(context.Context, *GetAPCControlRequest) (*VarListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAPCControl not implemented")
}
func (UnimplementedR401SServer) SetAPCControl(context.Context, *SetAPCControlRequest) (*VarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAPCControl not implemented")
}
func (UnimplementedR401SServer) SetControlSwitch(context.Context, *SetControlSwitchRequest) (*VarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetControlSwitch not implemented")
}
func (UnimplementedR401SServer) Reset(context.Context, *ResetRequest) (*VarReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedR401SServer) GetOperationVars(context.Context, *GetOperationVarsRequest) (*VarListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOperationVars not implemented")
}
func (UnimplementedR401SServer) GetStatusVars(context.Context, *GetStatusVarsRequest) (*VarListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatusVars not implemented")
}
func (UnimplementedR401SServer) GetConfoundingVars(context.Context, *GetConfoundingVarsRequest) (*VarListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfoundingVars not implemented")
}
func (UnimplementedR401SServer) GetReactorPerformance(context.Context, *GetReactorPerformanceRequest) (*VarListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReactorPerformance not implemented")
}
func (UnimplementedR401SServer) ConfirmReactorPerf(context.Context, *ConfirmReactorPerfRequest) (*VarListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmReactorPerf not implemented")
}
func (UnimplementedR401SServer) mustEmbedUnimplementedR401SServer() {}

// UnsafeR401SServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to R401SServer will
// result in compilation errors.
type UnsafeR401SServer interface {
	mustEmbedUnimplementedR401SServer()
}

func RegisterR401SServer(s grpc.ServiceRegistrar, srv R401SServer) {
	s.RegisterService(&R401S_ServiceDesc, srv)
}

func _R401S_GetAPCControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAPCControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).GetAPCControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_GetAPCControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).GetAPCControl(ctx, req.(*GetAPCControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _R401S_SetAPCControl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetAPCControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).SetAPCControl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_SetAPCControl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).SetAPCControl(ctx, req.(*SetAPCControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _R401S_SetControlSwitch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetControlSwitchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).SetControlSwitch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_SetControlSwitch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).SetControlSwitch(ctx, req.(*SetControlSwitchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _R401S_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _R401S_GetOperationVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOperationVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).GetOperationVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_GetOperationVars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).GetOperationVars(ctx, req.(*GetOperationVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _R401S_GetStatusVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).GetStatusVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_GetStatusVars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).GetStatusVars(ctx, req.(*GetStatusVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _R401S_GetConfoundingVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConfoundingVarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).GetConfoundingVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_GetConfoundingVars_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).GetConfoundingVars(ctx, req.(*GetConfoundingVarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _R401S_GetReactorPerformance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReactorPerformanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).GetReactorPerformance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_GetReactorPerformance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).GetReactorPerformance(ctx, req.(*GetReactorPerformanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _R401S_ConfirmReactorPerf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmReactorPerfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(R401SServer).ConfirmReactorPerf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: R401S_ConfirmReactorPerf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(R401SServer).ConfirmReactorPerf(ctx, req.(*ConfirmReactorPerfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// R401S_ServiceDesc is the grpc.ServiceDesc for R401S service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var R401S_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.r401s.R401S",
	HandlerType: (*R401SServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAPCControl",
			Handler:    _R401S_GetAPCControl_Handler,
		},
		{
			MethodName: "SetAPCControl",
			Handler:    _R401S_SetAPCControl_Handler,
		},
		{
			MethodName: "SetControlSwitch",
			Handler:    _R401S_SetControlSwitch_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _R401S_Reset_Handler,
		},
		{
			MethodName: "GetOperationVars",
			Handler:    _R401S_GetOperationVars_Handler,
		},
		{
			MethodName: "GetStatusVars",
			Handler:    _R401S_GetStatusVars_Handler,
		},
		{
			MethodName: "GetConfoundingVars",
			Handler:    _R401S_GetConfoundingVars_Handler,
		},
		{
			MethodName: "GetReactorPerformance",
			Handler:    _R401S_GetReactorPerformance_Handler,
		},
		{
			MethodName: "ConfirmReactorPerf",
			Handler:    _R401S_ConfirmReactorPerf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "r401s/r401s.proto",
}
